
LINK="\$(CC)"

LDFLAGS="-shared"

CL_PIC_OPT="-fPIC"


cl_include_opt="-I "
cl_compile_opt="-c"
cl_objout="-o "
cl_binout="-o "
cl_objext=".o"
cl_binext=
cl_modext=".so"

cl_regex_dirsep="\/"
cl_dirsep='/'

. auto/cc/name

if test -n "$CFLAGS"; then

	CC_TEST_FLAGS="$CFLAGS $CL_CC_OPT"

else

  case $CL_CC_NAME in
    gcc)
      . auto/cc/gcc
    ;;

    clang)
      . auto/cc/clang
    ;;

    msvc*)
      . auto/cc/msvc
  ;;
  esac

	CC_TEST_FLAGS="$CC_TEST_FLAGS $CL_CC_OPT"

fi


CFLAGS="$CFLAGS $CL_CC_OPT"
CL_TEST_LD_OPT="$CL_LD_OPT"


case $CL_PLATFORM in 

	MSYS_NT:*)
	;;


	*)
  	if test -n "$CL_LD_OPT"; then
  	  cl_feature=--with-ld-opt=\"$CL_LD_OPT\"
  	  cl_feature_name=
  	  cl_feature_run=no
  	  cl_feature_incs=
  	  cl_feature_path=
  	  cl_feature_libs=
  	  cl_feature_test=
  	  . auto/feature

  	  if [ $cl_found = no ]; then
  	    echo $0: error: the invalid value in --with-ld-opt=\"$CL_LD_OPT\"
  	    echo
  	    exit 1
  	  fi
  	fi


  	cl_feature="-Wl,-E switch"
  	cl_feature_name=
  	cl_feature_run=no
  	cl_feature_incs=
  	cl_feature_path=
  	cl_feature_libs=-Wl,-E
  	cl_feature_test=
  	. auto/feature

  	if [ $cl_found = yes ]; then
  	  LDFLAGS=${LDFLAGS:+$LDFLAGS }"-Wl,-E"
  	fi


  	cl_feature="gcc builtin atomic operations"
  	cl_feature_name=CL_HAVE_GCC_ATOMIC
  	cl_feature_run=yes
  	cl_feature_incs=
  	cl_feature_path=
  	cl_feature_libs=
  	cl_feature_test="long  n = 0;
  	                 if (!__sync_bool_compare_and_swap(&n, 0, 1))
  	                   return 1;
  	                 if (__sync_fetch_and_add(&n, 1) != 1)
  	                   return 1;
  	                 if (n != 2)
  	                   return 1;
  	                 __sync_synchronize();"
  	. auto/feature


  	if [ "$CL_CC_NAME" = "ccc" ]; then
  	  echo "checking for C99 variadic macros ... disabled"
  	else
  	  cl_feature="C99 variadic macros"
  	  cl_feature_name="CL_HAVE_C99_VARIADIC_MACROS"
  	  cl_feature_run=yes
  	  cl_feature_incs="#include <stdio.h>
#define var(dummy, ...)  sprintf(__VA_ARGS__)"
   	 cl_feature_path=
   	 cl_feature_libs=
   	 cl_feature_test="char  buf[30]; buf[0] = '0';
   	                  var(0, buf, \"%d\", 1);
   	                  if (buf[0] != '1') return 1"
   	 . auto/feature
   	fi


  	cl_feature="gcc variadic macros"
  	cl_feature_name="CL_HAVE_GCC_VARIADIC_MACROS"
  	cl_feature_run=yes
  	cl_feature_incs="#include <stdio.h>
#define var(dummy, args...)  sprintf(args)"
  	cl_feature_path=
  	cl_feature_libs=
  	cl_feature_test="char  buf[30]; buf[0] = '0';
  	                 var(0, buf, \"%d\", 1);
  	          			 if (buf[0] != '1') return 1"
  	. auto/feature


  	cl_feature="gcc builtin 64 bit byteswap"
  	cl_feature_name="CL_HAVE_GCC_BSWAP64"
  	cl_feature_run=no
  	cl_feature_incs=
  	cl_feature_path=
  	cl_feature_libs=
  	cl_feature_test="if (__builtin_bswap64(0)) return 1"
  	. auto/feature

	;;

esac

