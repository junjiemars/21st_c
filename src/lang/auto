# -*- mode:sh -*- vim:ft=sh
#


# check machine features
#----------------------------------------
nm_feature="endian"
nm_feature_name="nm_cpu_little_endian"
nm_feature_indent=yes
nm_feature_run=value
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test='int i=0x11223344;
                 char *p = (char*)&i;
                 int le = (0x44 == *p);
                 printf("%d", le);'
. ${NORE_ROOT}/auto/feature

## check machine features
##----------------------------------------
case "$NM_SYSTEM" in
  Darwin)
    nm_feature="cache line size"
    nm_feature_name='nm_cpu_cache_line'
    nm_feature_indent=yes
    nm_feature_run=value
    nm_feature_h='#include <stdio.h>
    #include<sys/sysctl.h>'
    nm_feature_flags=
    nm_feature_value=
    nm_feature_test='
    size_t line = 0;
    size_t size = sizeof(line);
    if (!sysctlbyname("hw.cachelinesize", &line, &size, 0, 0)) {
       printf("%d\n", (int)line);
       return 0;
    }
    return 1;'
    . ${NORE_ROOT}/auto/feature
    if [ "yes" = "$nm_found" ]; then
      NM_CPU_CACHE_LINE=$nm_feature_value
    fi
    ;;
  Linux)
    nm_feature="cache line size"
    nm_feature_name='nm_cpu_cache_line'
    nm_feature_indent=yes
    nm_feature_run=value
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags=
    nm_feature_value=
    nm_feature_test='
    FILE * p = fopen("/sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size", "r");
    if (p) {
        int i = 0;
        fscanf(p, "%d", &i);
        fclose(p);
        printf("%d\n", i);
        return 0;
    }
    return 1;'
    . ${NORE_ROOT}/auto/feature
    if [ "yes" = "$nm_found" ]; then
      NM_CPU_CACHE_LINE=$nm_feature_value
    fi
    ;;
  WinNT)
    nm_feature="cache line size"
    nm_feature_name='nm_cpu_cache_line'
    nm_feature_indent=yes
    nm_feature_run=value
    nm_feature_h='#include <stdlib.h>
    #include <stdio.h>
    #include <windows.h>'
    nm_feature_flags=
    nm_feature_value=
    nm_feature_test='
    size_t line = 0;
    DWORD size = 0;
    SYSTEM_LOGICAL_PROCESSOR_INFORMATION *buf = 0;
    GetLogicalProcessorInformation(0, &size);
    if (!size) {
      return 1;
    }
    buf = (SYSTEM_LOGICAL_PROCESSOR_INFORMATION*)malloc(size);
    if (!buf) {
      return 1;
    }
    if (GetLogicalProcessorInformation(&buf[0], &size)) {
      for (DWORD i = 0; i != size/sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION); i++) {
        if (buf[i].Relationship == RelationCache && 1 == buf[i].Cache.Level) {
          line = buf[i].Cache.LineSize;
          break;
        }
      }
    }
    free(buf);
    if (line) {
      printf("%d\n", (int)line);
      return 0;
    }
    return 1;'
    . ${NORE_ROOT}/auto/feature
    if [ "yes" = "$nm_found" ]; then
      NM_CPU_CACHE_LINE=$nm_feature_value
    fi
    ;;
  *)
    nm_found=no
    ;;
esac
if [ "yes" = "$nm_found" ]; then
  NM_CPU_CACHE_LINE=$nm_feature_value
else
  case "$NM_MACHINE" in
    x86_64|amd64|ia64) NM_CPU_CACHE_LINE=64 ;;
    i386|i686|i86pc|*) NM_CPU_CACHE_LINE=32 ;;
  esac
  have=NM_CPU_CACHE_LINE value=$NM_CPU_CACHE_LINE . ${NORE_ROOT}/auto/define
fi # end of check cache line size


# check header files
#----------------------------------------
include="stdint.h" . ${NORE_ROOT}/auto/include
include="inttypes.h" . ${NORE_ROOT}/auto/include
include="iso646.h" . ${NORE_ROOT}/auto/include
include="wchar.h" . ${NORE_ROOT}/auto/include
include="wctype.h" . ${NORE_ROOT}/auto/include

# check compiler features
#----------------------------------------
case "$CC_NAME" in
   clang|gcc)
     nm_feature="$CC_NAME -fsanitize=address"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=address'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature
     if [ yes = $nm_found ]; then
       flag=cflags_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi
     nm_feature="$CC_NAME -fsanitize=leak"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=leak'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature
     if [ yes = $nm_found ]; then
       flag=cflags_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi
     ;;
   msvc)
     ;;
esac


nm_feature="static_assert()"
nm_feature_name="nm_have_static_assert"
nm_feature_run=no
nm_feature_h="#include <assert.h>"
nm_feature_flags="$nm_std_opt"
nm_feature_test="
enum {N=5}; static_assert(N==5, \"N is not equal 5\");"
. ${NORE_ROOT}/auto/feature


nm_feature="variadic macro"
nm_feature_name="nm_have_variadic_macro"
nm_feature_run=yes
nm_feature_h="#include <stdio.h>
#define var(dummy, ...)  sprintf(__VA_ARGS__)"
nm_feature_flags=
nm_feature_test="
char buf[30]; buf[0] = '0';
var(0, buf, \"%d\", 1);
if (buf[0] != '1') return 1;"
. ${NORE_ROOT}/auto/feature


nm_feature="sprintf_s fn"
nm_feature_name="nm_have_sprintf_s_fn"
nm_feature_run=no
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test="
char buf[32];
sprintf_s(buf, sizeof(buf), \"%s\", \"xyz\")";
. ${NORE_ROOT}/auto/feature


nm_feature="snprintf fn"
nm_feature_name="nm_have_snprintf_fn"
nm_feature_run=no
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test="
char buf[32];
snprintf(buf, sizeof(buf), \"%s\", \"xyz\")";
. ${NORE_ROOT}/auto/feature


nm_feature="strn* fn: strnlen,strncpy,strncmp"
nm_feature_name="nm_have_strn_any_fn"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test="
char *xyz = \"xyz\";
char buf[16];
size_t len = strnlen(xyz, 16);
strncpy(buf, xyz, sizeof(buf));
strncmp(buf, xyz, len)";
. ${NORE_ROOT}/auto/feature


nm_feature="str*_s fn: strlen_s,strcpy_s"
nm_feature_name="nm_have_str_any_s fn"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test="
char *xyz = \"xyz\";
char buf[16];
size_t len = strlen(xyz);
strcpy_s(buf, sizeof(buf), xyz);"
. ${NORE_ROOT}/auto/feature


case "$CC_NAME" in
  gcc|clang)
    nm_feature="strdup fn"
    nm_feature_name="nm_have_strdup_fn"
    nm_feature_run=no
    nm_feature_h="#include <string.h>"
    nm_feature_flags=
    nm_feature_test="
    char *xyz = strdup(\"xyz\");"
    . ${NORE_ROOT}/auto/feature
    ;;
  msvc)
    nm_feature="strdup fn"
    nm_feature_name="nm_have_strdup_fn"
    nm_feature_run=no
    nm_feature_h="#include <string.h>"
    nm_feature_flags=
    nm_feature_test="
    char *xyz = _strdup(\"xyz\");"
    . ${NORE_ROOT}/auto/feature
		;;
esac
       


nm_feature="restrict keyword"
nm_feature_name="nm_have_restrict_keyword"
nm_feature_run=
nm_feature_h=
nm_feature_flags=
nm_feature_test='int x = 0x11; int *restrict p = &x;'
. ${NORE_ROOT}/auto/feature

if [ "yes" != $nm_found ]; then
	nm_feature="__restrict keyword"
	nm_feature_name="nm_have___restrict_keyword"
	nm_feature_run=
	nm_feature_h=
	nm_feature_flags=
	nm_feature_test='int x = 0x11; int *__restrict p = &x;'
	. ${NORE_ROOT}/auto/feature
fi

nm_feature="arc4random_uniform fn"
nm_feature_name='nm_have_arc4random_uniform_fn'
nm_feature_run=no
nm_feature_h='#include <stdlib.h>'
nm_feature_flags=
nm_feature_test='arc4random_uniform(1);'
. ${NORE_ROOT}/auto/feature

nm_feature="rand_s fn"
nm_feature_name='nm_have_rand_s_fn'
nm_feature_run=no
nm_feature_h='#include <stdlib.h>'
nm_feature_flags=
nm_feature_test='unsigned int x; rand_s(&x);'
. ${NORE_ROOT}/auto/feature

		
case "$CC_NAME" in
	clang)
		;;
	gcc)
		nm_feature="$CC_NAME -Wimplicit-fallthrough"
		nm_feature_name='nm_have_cc_opt_implicit_fallthrough'
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags='-Wimplicit-fallthrough'
		nm_feature_test=
		. ${NORE_ROOT}/auto/feature
		;;
	msvc)
		;;
esac

# typeof
case "$CC_NAME" in
	clang)
		nm_feature="$CC_NAME typeof"
		nm_feature_name='nm_have_typeof'
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags=
		nm_feature_test='int x = 0x1122; typeof(x) y = 0x3344'
		. ${NORE_ROOT}/auto/feature
		;;
	gcc)
		nm_feature="$CC_NAME typeof"
		nm_feature_name='nm_have_typeof'
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags=
		nm_feature_test='int x = 0x1122; typeof(x) y = 0x3344'
		. ${NORE_ROOT}/auto/feature
		;;
	msvc)
		nm_feature="$CC_NAME typeof"
		nm_feature_name='nm_have_typeof'
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags=
		nm_feature_test='int x = 0x1122; decltype(x) y = 0x3344'
		. ${NORE_ROOT}/auto/feature
		;;
esac

# entry
case "$NM_SYSTEM" in
	Darwin)
    case "$CC_NAME" in
      clang)
        flag=entry_opt op=":=" value="${nm_entry_opt}_entry" \
            . ${NORE_ROOT}/auto/make_define
        
        ;;
    esac
		;;
	Linux)
    # case "$CC_NAME" in
    #   gcc)
    #     flag=entry_opt op=":=" value="${nm_entry_opt}_entry" \
    #         . ${NORE_ROOT}/auto/make_define
    #     ;;
    # esac
		;;
	WinNT)
    # case "$CC_NAME" in
    #   msvc)
    #     flag=entry_opt op=":=" value="${nm_entry_opt}entry -subsystem:console" \
    #         . ${NORE_ROOT}/auto/make_define
    #     ;;
    # esac
		;;
esac

# eof
