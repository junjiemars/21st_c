# -*- mode:sh -*- vim:ft=sh
# ./configure --has-std_c99
#
echo " # view https://en.wikipedia.org/wiki/C99"

echo "checking ISO/IEC 9899:1990 (C90) header files ..."
#-----------------------------------
include="assert.h" . ${NORE_ROOT}/auto/include
include="ctype.h" . ${NORE_ROOT}/auto/include
include="errno.h" . ${NORE_ROOT}/auto/include
include="float.h" . ${NORE_ROOT}/auto/include
include="limits.h" . ${NORE_ROOT}/auto/include
include="locale.h" . ${NORE_ROOT}/auto/include
include="math.h" . ${NORE_ROOT}/auto/include
include="setjmp.h" . ${NORE_ROOT}/auto/include
include="signal.h" . ${NORE_ROOT}/auto/include
include="stdarg.h" . ${NORE_ROOT}/auto/include
include="stddef.h" . ${NORE_ROOT}/auto/include
include="stdio.h" . ${NORE_ROOT}/auto/include
include="stdlib.h" . ${NORE_ROOT}/auto/include
include="string.h" . ${NORE_ROOT}/auto/include
include="time.h" . ${NORE_ROOT}/auto/include

echo "checking ISO/IEC 9899:1990/Amd.1:1995 header files ..."
#-----------------------------------
include="iso646.h" . ${NORE_ROOT}/auto/include
include="wchar.h" . ${NORE_ROOT}/auto/include
include="wctype.h" . ${NORE_ROOT}/auto/include

echo "checking ISO/IEC 9899:1999 (C99) new header files ..."
#-----------------------------------
include="complex.h" . ${NORE_ROOT}/auto/include
include="fenv.h" . ${NORE_ROOT}/auto/include
include="inttypes.h" . ${NORE_ROOT}/auto/include
include="stdbool.h" . ${NORE_ROOT}/auto/include
include="stdint.h" . ${NORE_ROOT}/auto/include
include="tgmath.h" . ${NORE_ROOT}/auto/include

echo "checking C99 new data types ..."
#-----------------------------------
nm_feature="boolean type"
nm_feature_name="nm_have_bool_type"
nm_feature_run=yes
nm_feature_h='#include <stdbool.h>'
nm_feature_flags=
nm_feature_test='bool a = false, b = true;
                 return !(a || b);'
. ${NORE_ROOT}/auto/feature

nm_feature="long long int type"
nm_feature_name="nm_have_long_long_int_type"
nm_feature_run=yes
nm_feature_h=
nm_feature_flags=
nm_feature_test='long long int x=0;'
. ${NORE_ROOT}/auto/feature


echo "checking C99 new identifiers ..."
#-----------------------------------
nm_feature="__func__ identifier"
nm_feature_name="nm_have_func_identifier"
nm_feature_run=yes
nm_feature_h='#include <stdio.h>'
nm_feature_flags=
nm_feature_test='printf("fn=%s", __func__);'
. ${NORE_ROOT}/auto/feature

nm_feature="%zu format specifier"
nm_feature_name="nm_have_zu_format_specifier"
nm_feature_run=yes
nm_feature_h='#include <stdio.h>'
nm_feature_flags=
nm_feature_test='printf("%zu", sizeof(int));'
. ${NORE_ROOT}/auto/feature

echo "checking C99 new keywords ..."
#-----------------------------------
nm_feature="inline keyword"
nm_feature_name="nm_have_inline_keyword"
nm_feature_run=
nm_feature_h='static inline int f(int x) { return x*x; }'
nm_feature_flags=
nm_feature_test='f(10);'
. ${NORE_ROOT}/auto/feature

nm_feature="restrict keyword"
nm_feature_name="nm_have_restrict_keyword"
nm_feature_run=
nm_feature_h=
nm_feature_flags=
nm_feature_test='int x = 0x11; int *restrict p = &x;'
. ${NORE_ROOT}/auto/feature

echo "checking C99 new features ..."
#-----------------------------------
nm_feature="designated initializers"
nm_feature_name="nm_have_designated_initializers"
nm_feature_run=
nm_feature_h=
nm_feature_flags=
nm_feature_test="char x[]={ [2]='c', [0]='a' };
struct S {
  char c;
	int i;
} s = { .c='a', .i=0 };"
. ${NORE_ROOT}/auto/feature

nm_feature="variable-length array"
nm_feature_name="nm_have_variable_length_array"
nm_feature_run=
nm_feature_h='#include <stddef.h>'
nm_feature_flags=
nm_feature_test='size_t n=4; int x[n];'
. ${NORE_ROOT}/auto/feature

nm_feature="variadic macro"
nm_feature_name="nm_have_variadic_macro"
nm_feature_run=
nm_feature_h='#include <stdio.h>'
nm_feature_flags=
nm_feature_test='#define PP(fmt, ...) printf(fmt, __VA_ARGS__)
PP("variadic=%s", "yes");'
. ${NORE_ROOT}/auto/feature

nm_feature="compound literals"
nm_feature_name="nm_have_compound_literals"
nm_feature_run=
nm_feature_h='#include <string.h>'
nm_feature_flags=
nm_feature_test='strcmp("abc", (char[]){"abc"});'
. ${NORE_ROOT}/auto/feature

nm_feature="complex numbers"
nm_feature_name="nm_have_complex_creal_fn"
nm_feature_run=no
nm_feature_h="#include <complex.h>"
nm_feature_flags=
case "$CC_NAME" in
	msvc)
		nm_feature_test='double d = creal(_DCOMPLEX_(1.0, 2.0));'
		;;
	*)
		nm_feature_test='double d = creal(1.0 + 2.0*I);'
		;;
esac
. ${NORE_ROOT}/auto/feature


# end of file
