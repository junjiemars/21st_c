

nm_feature="C11 strcpy_s function"
nm_feature_name="nm_have_strcpy_s_fn"
nm_feature_run=no
nm_feature_incs="#include <string.h>"
nm_feature_path=
nm_feature_libs=
nm_feature_flags=
nm_feature_test="char s[16]; strcpy_s(s,sizeof(s),\"hello strcpy_s\");"
. ${NM_HOME}auto/feature


nm_feature="C11 threads.h header file"
nm_feature_name="nm_have_threads_h"
nm_feature_run=no
nm_feature_incs="#include <threads.h>"
nm_feature_path=
nm_feature_libs=
nm_feature_test=
. ${NM_HOME}auto/feature


nm_feature="C11 static assertion"
nm_feature_name="nm_have_static_assert"
nm_feature_run=no
nm_feature_incs="#include <assert.h>"
nm_feature_path=
nm_feature_libs=
nm_feature_flags=
nm_feature_test="enum {N=5}; static_assert(N==5, \"N is not equal 5\");"
. ${NM_HOME}auto/feature


nm_feature="C99 #pragma once"
nm_feature_name="nm_pragma_once"
nm_feature_run=no
nm_feature_incs="#pragma once"
nm_feature_path=
nm_feature_libs=
nm_feature_test=
. ${NM_HOME}auto/feature

nm_feature="C99 stdbool.h header file"
nm_feature_name="nm_have_stdbool_h"
nm_feature_run=no
nm_feature_incs="#include <stdbool.h>"
nm_feature_path=
nm_feature_libs=
nm_feature_test="bool t=true,f=false;"
. ${NM_HOME}auto/feature

nm_feature="C99 tgmath.h header file"
nm_feature_name="nm_have_tgmath_h"
nm_feature_run=no
nm_feature_incs="#include <tgmath.h>"
nm_feature_path=
nm_feature_libs=
nm_feature_test="sqrt(1);sqrt(1.0f);sqrt(1.0);"
. ${NM_HOME}auto/feature


