# -*- mode:sh -*- vim:ft=sh
#
# generated by Nore
#

# check posix features
. src/posix/auto

# check header file existing
#----------------------------------------
#include="stdint.h" . ${NORE_ROOT}/auto/include

#check features based on Compiler
#----------------------------------------
nm_feature="popen"
nm_feature_name="nm_have_popen_fn"
nm_feature_run=no
nm_feature_h='#include <stdio.h>'
nm_feature_flags=
nm_feature_inc=
nm_feature_ldlibs=
nm_feature_test='FILE* f=popen("dir","r"); if (f) pclose(f);'
. ${NORE_ROOT}/auto/feature

# check compiler features
#----------------------------------------
case "$CC_NAME" in
   gcc|clang)
     nm_feature="$CC_NAME -fsanitize=address"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=address'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature

     if [ yes = $nm_found ]; then
       flag=cflags_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi

     nm_feature="$CC_NAME -fsanitize=leak"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=leak'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature

     if [ yes = $nm_found ]; then
       flag=cflags_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi
     ;;		 
   msvc)
     ;;
esac

case $CC_NAME in
	clang)
		;;
	gcc)
		;;
  msvc)

		nm_feature="_popen"
		nm_feature_name="nm_have__popen_fn"
		nm_feature_run=no
		nm_feature_h='#include <stdio.h>'
		nm_feature_flags=
		nm_feature_inc=
		nm_feature_ldlibs=
		nm_feature_test='FILE* f=_popen("dir","r"); if (f) _pclose(f);'
		. ${NORE_ROOT}/auto/feature
		;;
esac


nm_feature="fpurge fn"
nm_feature_name="nm_have_fpurge_fn"
nm_feature_run=no
nm_feature_h='#include <stdio.h>'
nm_feature_flags=
nm_feature_inc=
nm_feature_ldlibs=
nm_feature_test='fpurge(stdin);'
. ${NORE_ROOT}/auto/feature


# check features based on OS
#----------------------------------------
case $NM_SYSTEM in
	Darwin)
	  ;;
	Linux)
		nm_feature="__fpurge fn"
		nm_feature_name="nm_have___fpurge_fn"
		nm_feature_run=no
		nm_feature_h='#include <stdio.h>
                  #include <stdio_ext.h>'
		nm_feature_flags=
		nm_feature_inc=
		nm_feature_ldlibs=
		nm_feature_test='__fpurge(stdin);'
		. ${NORE_ROOT}/auto/feature
	  ;;
	WinNT)
		nm_feature="P_tmpdir definition"
		nm_feature_name="nm_have_P_tmpdir"
		nm_feature_run=no
		nm_feature_h='#include <stdio.h>'
		nm_feature_flags=
		nm_feature_inc=
		nm_feature_ldlibs=
		nm_feature_test='printf("%s\n", P_tmpdir);'
		. ${NORE_ROOT}/auto/feature

	  ;;
	*)
	  ;;
esac

# restrict
nm_feature="restrict keyword"
nm_feature_name="nm_have_restrict_keyword"
nm_feature_run=
nm_feature_h=
nm_feature_flags=
nm_feature_test='int x = 0x11; int *restrict p = &x;'
. ${NORE_ROOT}/auto/feature

if [ "yes" != $nm_found ]; then
	nm_feature="__restrict keyword"
	nm_feature_name="nm_have___restrict_keyword"
	nm_feature_run=
	nm_feature_h=
	nm_feature_flags=
	nm_feature_test='int x = 0x11; int *__restrict p = &x;'
	. ${NORE_ROOT}/auto/feature
fi


# open
case $NM_SYSTEM in
	Darwin|Linux)
    nm_feature="open fn"
    nm_feature_name="nm_have_open_fn"
    nm_feature_run=no
    nm_feature_h='#include <fcntl.h>'
    nm_feature_flags=
    nm_feature_test='int fd = open("/dev/zero", 0);'
    . ${NORE_ROOT}/auto/feature
	  ;;
	WinNT)
	  ;;
	*)
	  ;;
esac




