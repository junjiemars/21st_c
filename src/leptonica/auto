# -*- mode:sh -*- vim:ft=sh


# check leptonica requirements
#----------------------------------------
has_leptonica_required=NO
printf " + checking for leptonica required ... "
if ((which libtoolize >/dev/null && libtoolize --version >/dev/null)            \
     || (which glibtoolize >/dev/null && glibtoolize --version >/dev/null))     \
    && ((which aclocal >/dev/null && aclocal --version >/dev/null)              \
        && (which autoheader >/dev/null && autoheader --version >/dev/null)     \
        && (which autoconf >/dev/null && autoconf --version >/dev/null)         \
        && (which automake >/dev/null && automake --version >/dev/null)); then
  printf "yes\n"
  has_leptonica_required=YES
  flag=has_leptonica_required op=":=" value="YES" \
      . ${NORE_ROOT}/auto/make_define
else
  printf "no\n"
fi

# check sanitize feature
#----------------------------------------
case "$CC_NAME" in
   gcc|clang)
     nm_feature="$CC_NAME -fsanitize=address"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=address'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature
     if [ yes = $nm_found ]; then
       flag=f_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi
     nm_feature="$CC_NAME -fsanitize=leak"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=leak'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature
     if [ yes = $nm_found ]; then
       flag=f_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi
     ;;
   msvc)
     ;;
esac


# check math library
#----------------------------------------
case $NM_SYSTEM in
	Darwin)
	  ;;

	Linux)
		nm_feature="math lib"
		nm_feature_name="nm_have_math_lib"
    nm_feature_indent=yes
		nm_feature_run=yes
		nm_feature_h="#include <math.h>"
		nm_feature_tails="${nm_lib_opt}m"
		nm_feature_test='int x = round(2.5);
										 return (2 == x);'
		. ${NORE_ROOT}/auto/feature
		if [ yes = $nm_found ]; then
			flag=stdmath_lib_opt op=':=' value='$(nm_lib_opt)m' \
          . ${NORE_ROOT}/auto/make_define
		fi
	  ;;

	WinNT)
	  ;;

	*)
		;;
esac


# check compiler features
# ----------------------------------------
case "$CC_NAME" in
  clang|gcc)
    nm_feature="$CC_NAME -Wno-unused-*"
    nm_feature_name=
    nm_feature_indent=yes
    nm_feature_run=no
    nm_feature_h=
    nm_feature_flags='-Wno-unused-variable -Wno-unused-const-variable -Wno-unused-function'
    nm_feature_test=
    . ${NORE_ROOT}/auto/feature

    if [ yes = $nm_found ]; then
      flag="leptonica_cc_opt" op="+=" value=$nm_feature_flags \
          . ${NORE_ROOT}/auto/make_define
    fi
    ;;
  msvc)
    ;;
esac


# eof
