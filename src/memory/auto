# -*- mode:sh -*- vim:ft=sh
#
# generated by Nore
#

include="stdint.h" . ${NORE_ROOT}/auto/include
include="inttypes.h" . ${NORE_ROOT}/auto/include
include="stdbool.h" . ${NORE_ROOT}/auto/include


nm_feature="sizeof(void*)"
nm_feature_name="nm_ptr_len"
nm_feature_run=value
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test='void* p; printf("%zu", sizeof p);'
. ${NORE_ROOT}/auto/feature


nm_feature="sizeof(size_t)"
nm_feature_name="nm_size_t_len"
nm_feature_flags=
nm_feature_run=value
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test='printf("%zu", sizeof(size_t)*8);'
. ${NORE_ROOT}/auto/feature


nm_feature="variable-length array"
nm_feature_name="nm_have_vla"
nm_feature_flags=
nm_feature_run=no
nm_feature_h=
nm_feature_flags=
nm_feature_test='int size; int buffer[size];'
. ${NORE_ROOT}/auto/feature


# check features based on OS
#----------------------------------------
case $NM_SYSTEM in
	Darwin)
		nm_feature="malloc_size fn"
		nm_feature_name="nm_have_malloc_size_fn"
		nm_feature_run=no
		nm_feature_h='#include <malloc/malloc.h>
                  #include <stdlib.h>'
		nm_feature_flags=
		nm_feature_test='int *p=malloc(16*sizeof(*p));
                     malloc_size(p);
                     free(p);'
		. ${NORE_ROOT}/auto/feature
	  ;;
	Linux)
		nm_feature="malloc_size fn"
		nm_feature_name="nm_have_malloc_size_fn"
		nm_feature_run=no
		nm_feature_h='#include <malloc.h>
                  #include <stdlib.h>'
		nm_feature_flags=
		nm_feature_test='int *p=malloc(16*sizeof(*p));
                     malloc_usable_size(p);
                     free(p);'
		. ${NORE_ROOT}/auto/feature
	  ;;
	WinNT)
		nm_feature="malloc_size fn"
		nm_feature_name="nm_have_malloc_size_fn"
		nm_feature_run=no
		nm_feature_h='#include <malloc.h>'
		nm_feature_flags=
		nm_feature_test='int *p=malloc(16*sizeof(*p));
                     _msize(p);
                     free(p);'
		. ${NORE_ROOT}/auto/feature		
	  ;;
	*)
	  ;;
esac

case "$NM_SYSTEM" in
	Darwin|Linux)
		nm_feature="aligned_alloc fn"
		nm_feature_name="nm_have_aligned_alloc_fn"
		nm_feature_run=no
		nm_feature_h='#include <stdlib.h>'
		nm_feature_flags="${nm_std_opt} ${nm_error_opt}"
		nm_feature_test='void *p = aligned_alloc(1024, 4096); 
                     return !p;'
		. ${NORE_ROOT}/auto/feature

		if [ "yes" != $nm_found ]; then
			nm_feature="posix_memalign fn"
			nm_feature_name="nm_have_posix_memalign_fn"
			nm_feature_run=no
			nm_feature_h='#include <stdlib.h>'
			nm_feature_flags=
			nm_feature_test='void *p; int n = posix_memalign(&p, 4096, 4096);
                       return n;'
			. ${NORE_ROOT}/auto/feature
		fi
		;;
	WinNT)
		nm_feature="memalign fn"
		nm_feature_name="nm_have_memalign_fn"
		nm_feature_run=no
		nm_feature_h=' #include <malloc.h>'
		nm_feature_flags=
		nm_feature_test='void *p = _aligned_malloc(1024, 4096);
                     return !p;'
		. ${NORE_ROOT}/auto/feature
		;;
esac

# EOF
