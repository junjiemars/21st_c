#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## memory/auto
####


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi



# check ncstd.h features
. ${POSIX_ROOT}/ndef_auto



echo "checking for {memory} ..."



# check machine features
#----------------------------------------
nm_feature="endian"
nm_feature_name="nm_cpu_little_endian"
nm_feature_indent=yes
nm_feature_run=value
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test='int i=0x11223344;
                 char *p = (char*)&i;
                 int le = (0x44 == *p);
                 printf("%d", le);'
. ${NORE_ROOT}/auto/feature



# check size
#----------------------------------------
nm_feature="sizeof(void*)"
nm_feature_name="nm_ptr_len"
nm_feature_run=value
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test='void* p; printf("%zu", sizeof p);'
. ${NORE_ROOT}/auto/feature


nm_feature="sizeof(size_t)"
nm_feature_name="nm_size_t_len"
nm_feature_flags=
nm_feature_run=value
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test='printf("%zu", sizeof(size_t)*8);'
. ${NORE_ROOT}/auto/feature


nm_feature="variable-length array"
nm_feature_name="nm_have_vla"
nm_feature_flags=
nm_feature_run=no
nm_feature_h=
nm_feature_flags=
nm_feature_test='int size; int buffer[size];'
. ${NORE_ROOT}/auto/feature


# check features based on OS
#----------------------------------------
case $NM_SYSTEM in
	Darwin|Linux)
		nm_feature="alloca()"
		nm_feature_name="nm_have_alloca_fn"
		nm_feature_run=yes
		nm_feature_h='#include <alloca.h>'
		nm_feature_flags=
		nm_feature_test='int *p=alloca(16*sizeof(*p));
                     return !p;'
		. ${NORE_ROOT}/auto/feature
	  ;;
	WinNT)
		nm_feature="alloca()"
		nm_feature_name="nm_have_alloca_fn"
		nm_feature_run=no
		nm_feature_h='#include <malloc.h>'
		nm_feature_flags=
		nm_feature_test='int *p=alloca(16*sizeof(*p));
                     return !p;'
		. ${NORE_ROOT}/auto/feature
	  ;;
	*)
	  ;;
esac


case $NM_SYSTEM in
	Darwin)
		nm_feature="malloc_size()"
		nm_feature_name="nm_have_malloc_size_fn"
		nm_feature_run=no
		nm_feature_h='#include <malloc/malloc.h>
                  #include <stdlib.h>'
		nm_feature_flags=
		nm_feature_test='int *p=malloc(16*sizeof(*p));
                     malloc_size(p);
                     free(p);'
		. ${NORE_ROOT}/auto/feature
	  ;;
	Linux)
		nm_feature="malloc_size()"
		nm_feature_name="nm_have_malloc_size_fn"
		nm_feature_run=no
		nm_feature_h='#include <malloc.h>
                  #include <stdlib.h>'
		nm_feature_flags=
		nm_feature_test='int *p=malloc(16*sizeof(*p));
                     malloc_usable_size(p);
                     free(p);'
		. ${NORE_ROOT}/auto/feature
	  ;;
	WinNT)
		nm_feature="malloc_size()"
		nm_feature_name="nm_have_malloc_size_fn"
		nm_feature_run=no
		nm_feature_h='#include <malloc.h>'
		nm_feature_flags=
		nm_feature_test='int *p=malloc(16*sizeof(*p));
                     _msize(p);
                     free(p);'
		. ${NORE_ROOT}/auto/feature
	  ;;
	*)
	  ;;
esac

case "$NM_SYSTEM" in
	Darwin|Linux)
		nm_feature="aligned_alloc()"
		nm_feature_name="nm_have_aligned_alloc_fn"
		nm_feature_run=no
		nm_feature_h='#include <stdlib.h>'
		nm_feature_flags="${nm_std_opt} ${nm_error_opt}"
		nm_feature_test='void *p = aligned_alloc(1024, 4096);
                     return !p;'
		. ${NORE_ROOT}/auto/feature

		if [ "yes" != $nm_found ]; then
			nm_feature="posix_memalign()"
			nm_feature_name="nm_have_posix_memalign_fn"
			nm_feature_run=no
			nm_feature_h='#include <stdlib.h>'
			nm_feature_flags=
			nm_feature_test='void *p; int n = posix_memalign(&p, 4096, 4096);
                       return n;'
			. ${NORE_ROOT}/auto/feature
		fi
		;;
	WinNT)
		nm_feature="memalign()"
		nm_feature_name="nm_have_memalign_fn"
		nm_feature_run=no
		nm_feature_h=' #include <malloc.h>'
		nm_feature_flags=
		nm_feature_test='void *p = _aligned_malloc(1024, 4096);
                     return !p;'
		. ${NORE_ROOT}/auto/feature
		;;
esac

case "$CC_NAME" in
	clang)
		nm_feature="typeof operator"
		nm_feature_name='nm_have_typeof'
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags=
		nm_feature_test='int x = 0x1122; __typeof(x) y = 0x3344'
		. ${NORE_ROOT}/auto/feature
		;;
	gcc)
		nm_feature="typeof operator"
		nm_feature_name='nm_have_typeof'
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags=
		nm_feature_test='int x = 0x1122; typeof(x) y = 0x3344'
		. ${NORE_ROOT}/auto/feature
		;;
	msvc)
		nm_feature="typeof operator"
		nm_feature_name='nm_have_typeof'
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags=
		nm_feature_test='int x = 0x1122; decltype(x) y = 0x3344'
		. ${NORE_ROOT}/auto/feature
		;;
esac


# check jemalloc
#----------------------------------------
has_pkg_config=NO
has_jemalloc=NO
echo $echo_n " + checking for pkg-config ... $echo_c"
if pkg-config --version >/dev/null; then
  echo "yes"
  flag=has_pkg_config op=":=" value="YES" \
      . ${NORE_ROOT}/auto/make_define
else
  echo "no"
fi
if [ "$has_pkg_config" = "YES" ]; then
  jemalloc_ldlibs="$(pkg-config --libs jemalloc)"
  jemalloc_cflags="$(pkg-config --cflags jemalloc)"
  if [ -n "$jemalloc_ldlibs" ]; then
    nm_feature="jemalloc"
    nm_feature_name="nm_have_jemalloc"
    nm_feature_indent=yes
    nm_feature_run=yes
    nm_feature_h="#include <jemalloc/jemalloc.h>
                  #include <stdio.h>"
    nm_feature_flags="$jemalloc_cflags"
    nm_feature_tails="$jemalloc_ldlibs"
    nm_feature_test='printf("%s", JEMALLOC_VERSION);'
    . ${NORE_ROOT}/auto/feature
    if [ yes = $nm_found ]; then
      flag=has_jemalloc op=":=" value="YES" \
          . ${NORE_ROOT}/auto/make_define
      flag=jemalloc_cflags op=":=" value="$jemalloc_cflags" \
          . ${NORE_ROOT}/auto/make_define
      flag=jemalloc_ldlibs op=":=" value="$jemalloc_ldlibs" \
          . ${NORE_ROOT}/auto/make_define
    fi
  fi
fi


# eof
