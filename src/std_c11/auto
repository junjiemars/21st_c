# -*- mode:sh -*- vim:ft=sh

echo " # view https://en.wikipedia.org/wiki/C_standard_library"

echo "checking ISO/IEC 9899:2011 (C11) new header files ..."
#-----------------------------------
include="stdalign.h" . ${NORE_ROOT}/auto/include
include="stdatomic.h" . ${NORE_ROOT}/auto/include
include="stdnoreturn.h" . ${NORE_ROOT}/auto/include
include="threads.h" . ${NORE_ROOT}/auto/include
include="uchar.h" . ${NORE_ROOT}/auto/include


echo "checking C11 new features ..."
#-----------------------------------
nm_feature="_Alignof"
nm_feature_name="nm_have_alignof"
nm_feature_run=no
nm_feature_h='#include <stdalign.h>'
nm_feature_flags=
nm_feature_test='(void) (1 == _Alignof(char));'
. ${NORE_ROOT}/auto/feature

nm_feature="_Alignas"
nm_feature_name="nm_have_alignas"
nm_feature_run=no
nm_feature_h='#include <stdalign.h>'
nm_feature_flags=
nm_feature_test='_Alignas(64) char cache[64];'
. ${NORE_ROOT}/auto/feature

nm_feature="_Atomic"
nm_feature_name="nm_have_atomic"
nm_feature_run=no
nm_feature_h='#include <stdatomic.h>
_Atomic struct A {
  int x;
} a;'
nm_feature_flags=
nm_feature_test='atomic_is_lock_free(&a);'
. ${NORE_ROOT}/auto/feature

nm_feature="_Generic"
nm_feature_name="nm_have_generic"
nm_feature_run=no
nm_feature_h=
nm_feature_flags=
nm_feature_test='
#define type_name(x) _Generic((x), int:1, double:2, default: 3)
(void) sizeof(type_name(1));
(void) sizeof(type_name(1.0));
'
. ${NORE_ROOT}/auto/feature

nm_feature="_Noreturn"
nm_feature_name="nm_have_noreturn"
nm_feature_run=no
nm_feature_h='#include <stdnoreturn.h>
#include <stdlib.h>
_Noreturn void fatal(int x) {
  exit(x);
}
'
nm_feature_flags=
nm_feature_test='fatal(0);'
. ${NORE_ROOT}/auto/feature

nm_feature="_Static_assert"
nm_feature_name="nm_have_static_assert"
nm_feature_run=no
nm_feature_h="#include <assert.h>"
nm_feature_flags=
nm_feature_flags=
nm_feature_test="enum {N=5}; _Static_assert(N==5, \"N is not equal 5\");"
. ${NORE_ROOT}/auto/feature

# eof
