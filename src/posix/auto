#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## check posix features
####

# check header file existing
#----------------------------------------
include="stdint.h" . ${NORE_ROOT}/auto/include
include="inttypes.h" . ${NORE_ROOT}/auto/include


# check restrict keyword
#----------------------------------------
nm_feature="restrict"
nm_feature_name="nm_have_restrict"
nm_feature_run=
nm_feature_h=
nm_feature_flags=
nm_feature_test='int x = 0x11; int *restrict p = &x;'
. ${NORE_ROOT}/auto/feature
if [ "yes" != $nm_found ]; then
	nm_feature="__restrict keyword"
	nm_feature_name="nm_have___restrict"
	nm_feature_run=
	nm_feature_h=
	nm_feature_flags=
	nm_feature_test='int x = 0x11; int *__restrict p = &x;'
	. ${NORE_ROOT}/auto/feature
fi                              # end of restrict


# check static_assert
#----------------------------------------
nm_feature="static_assert"
nm_feature_name="nm_have_static_assert"
nm_feature_run=yes
nm_feature_h="#include <assert.h>"
nm_feature_flags="$nm_std_opt"
nm_feature_test="enum {N=5}; static_assert(N==5, \"N is not equal 5\");"
. ${NORE_ROOT}/auto/feature     # end of static_assert


# check strdup
#----------------------------------------
case $NM_SYSTEM in
  Darwin)
    nm_feature="strdup"
    nm_feature_name="nm_have_strdup"
    nm_feature_run=no
    nm_feature_h='#include <string.h>'
    nm_feature_flags=
    nm_feature_test='char *s = strdup("abc");'
    . ${NORE_ROOT}/auto/feature
    ;;
  Linux)
    nm_feature="strdup"
    nm_feature_name="nm_have_strdup"
    nm_feature_run=no
    nm_feature_h='#include <string.h>'
    nm_feature_flags='-D__USE_XOPEN_EXTENDED'
    nm_feature_test='char *s = strdup("abc");'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    nm_feature="strdup"
    nm_feature_name="nm_have_strdup"
    nm_feature_run=no
    nm_feature_h='#include <string.h>'
    nm_feature_flags=
    nm_feature_test='char *s = _strdup("abc");'
    . ${NORE_ROOT}/auto/feature
    ;;
  *)
    ;;
esac                            # end of strdup



# check getdelim
#----------------------------------------
case $NM_SYSTEM in
  Darwin)
    nm_feature="getdelim"
    nm_feature_name="nm_have_getdelim"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags=
    nm_feature_test='char *line = 0; size_t n = 0;
                     getdelim(&line, &n, 0x0a, stdout);'
    . ${NORE_ROOT}/auto/feature
    ;;
  Linux)
    nm_feature="getdelim"
    nm_feature_name="nm_have_getdelim"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags="-D__USE_XOPEN2K8"
    nm_feature_test='char *line = 0; size_t n = 0;
                     getdelim(&line, &n, 0x0a, stdout);'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    nm_feature="getdelim"
    nm_feature_name="nm_have_getdelim"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags=
    nm_feature_test='char *line = 0; size_t n = 0;
                     getdelim(&line, &n, 0x0a, stdout);'
    . ${NORE_ROOT}/auto/feature
    ;;
  *)
    ;;
esac                            # end of getdelim


# check fileno
#----------------------------------------
case $NM_SYSTEM in
  Darwin)
    nm_feature="fileno"
    nm_feature_name="nm_have_fileno"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags=
    nm_feature_test='fileno(stdout);'
    . ${NORE_ROOT}/auto/feature
    ;;
  Linux)
    nm_feature="fileno"
    nm_feature_name="nm_have_fileno"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags='-D__USE_POSIX'
    nm_feature_test='fileno(stdout);'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    nm_feature="fileno"
    nm_feature_name="nm_have_fileno"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags='-D_CRT_SECURE_NO_WARNINGS'
    nm_feature_test='fileno;'
    . ${NORE_ROOT}/auto/feature
    ;;
  *)
    ;;
esac                            # end of fileno


# check open function
#----------------------------------------
case $NM_SYSTEM in
  Darwin|Linux)
    nm_feature="open"
    nm_feature_name="nm_have_open"
    nm_feature_run=no
    nm_feature_h='#include <fcntl.h>'
    nm_feature_flags=
    nm_feature_test='int fd = open("/dev/zero", 0);'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    ;;
  *)
    ;;
esac                            # end of open


# mmap
#----------------------------------------
case $NM_SYSTEM in
  Darwin|Linux)
    nm_feature="mmap"
    nm_feature_name="nm_have_mmap"
    nm_feature_run=no
    nm_feature_h='#include <sys/mman.h>'
    nm_feature_flags=
    nm_feature_test='mmap(0, 16, 1, 0, 3, 0);'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    ;;
  *)
    ;;
esac                            # end of mmap

# sysconf
#----------------------------------------
case $NM_SYSTEM in
  Darwin|Linux)
    nm_feature="sysconf"
    nm_feature_name="nm_have_sysconf"
    nm_feature_run=no
    nm_feature_h='#include <unistd.h>'
    nm_feature_flags=
    nm_feature_test='sysconf(_SC_PAGESIZE);'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    ;;
  *)
    ;;
esac                            # end of sysconf


# tmpfile
#----------------------------------------
nm_feature="tmpfile"
nm_feature_name="nm_have_tmpfile"
nm_feature_run=
nm_feature_h='#include <stdio.h>'
nm_feature_flags=
nm_feature_test='(void)tmpfile();'
. ${NORE_ROOT}/auto/feature

# mkstemp
#----------------------------------------
nm_feature="mkstemp"
nm_feature_name="nm_have_mkstemp"
nm_feature_run=
nm_feature_h='#include <stdlib.h>'
nm_feature_flags=
nm_feature_test='mkstemp("abc");'
. ${NORE_ROOT}/auto/feature


# check sanitize feature
#----------------------------------------
case "$CC_NAME" in
   gcc|clang)
     nm_feature="-fsanitize=address"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=address'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature
     if [ yes = $nm_found ]; then
       flag=f_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi
     nm_feature="-fsanitize=leak"
     nm_feature_name=
     nm_feature_indent=yes
     nm_feature_run=no
     nm_feature_h=
     nm_feature_flags='-fsanitize=leak'
     nm_feature_test=
     . ${NORE_ROOT}/auto/feature
     if [ yes = $nm_found ]; then
       flag=f_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
     fi
     ;;
   msvc)
     ;;
esac


# eof
