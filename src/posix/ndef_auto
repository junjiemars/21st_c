#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## posix/ndef_auto
####


if [ -z "$define_ndef_h" ]; then

define_ndef_h="ndef.h"


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi


# check for <npstd.h>
. ${POSIX_ROOT}/npstd_auto


if [    "$ndef_restrict" = "yes"                \
     -o "$ndef_static_assert" = "yes"           \
     -o "$ndef_alignof" = "yes"                 \
     -o "$ndef_alignas" = "yes"                 \
   ]; then
  echo "checking for ndef.h ..."
else
  return
fi




# check restrict keyword
#----------------------------------------
if [ "$ndef_restrict" = "yes" ]; then
  nm_feature="restrict"
  nm_feature_name="nm_have_restrict"
  nm_feature_run=
  nm_feature_h=
  nm_feature_flags="$CFLAGS"
  nm_feature_test='int x = 0x11; int *restrict p = &x; (void)sizeof(p);'
  . ${NORE_ROOT}/auto/feature
  if [ "yes" != $nm_found ]; then
	  nm_feature="__restrict keyword"
	  nm_feature_name="nm_have___restrict"
	  nm_feature_run=
	  nm_feature_h=
	  nm_feature_flags="$CFLAGS"
	  nm_feature_test='int x = 0x11; int *__restrict p = &x; (void)sizeof(p);'
	  . ${NORE_ROOT}/auto/feature
  fi
fi


# check static_assert
#----------------------------------------
if [ "$ndef_static_assert" = "yes" ]; then
  nm_feature="static_assert"
  nm_feature_name="nm_have_static_assert"
  nm_feature_run=yes
  nm_feature_h="#include <assert.h>"
  nm_feature_flags="$CFLAGS"
  nm_feature_test='enum {N=5}; static_assert(N==5, "N is not equal 5");'
  . ${NORE_ROOT}/auto/feature     # end of static_assert
  if [ "yes" != $nm_found ]; then
	  nm_feature="_Static_assert"
	  nm_feature_name="nm_have___static_assert"
	  nm_feature_run=
	  nm_feature_h=
	  nm_feature_flags="$CFLAGS"
	  nm_feature_test='enum {N=5}; static_assert(N==5, "N is not equal 5");'
	  . ${NORE_ROOT}/auto/feature
  fi
fi


# check alignof
#----------------------------------------
if [ "$ndef_alignof" = "yes" ]; then
  nm_feature="alignof"
  nm_feature_name="nm_have_alignof"
  nm_feature_run=yes
  nm_feature_h='#include <stdalign.h>'
  nm_feature_flags=
  nm_feature_test='int a = (int) alignof(short);'
  . ${NORE_ROOT}/auto/feature
  if [ "yes" != $nm_found ]; then
	  nm_feature="_Alignof"
	  nm_feature_name="nm_have__alignof"
	  nm_feature_run=
	  nm_feature_h=
	  nm_feature_flags=
	  nm_feature_test='int a = (int) _Alignof(short);'
	  . ${NORE_ROOT}/auto/feature
  fi
fi

# check alignas
#----------------------------------------
if [ "$ndef_alignas" = "yes" ]; then
  nm_feature="alignas"
  nm_feature_name="nm_have_alignas"
  nm_feature_run=yes
  nm_feature_h='#include <stdalign.h>'
  nm_feature_flags=
  nm_feature_test='int alignas(2) a;'
  . ${NORE_ROOT}/auto/feature
  if [ "yes" != $nm_found ]; then
	  nm_feature="_Alignas"
	  nm_feature_name="nm_have__alignas"
	  nm_feature_run=
	  nm_feature_h=
	  nm_feature_flags=
	  nm_feature_test='int alignas(2) a;'
	  . ${NORE_ROOT}/auto/feature
  fi
fi



fi                              # define_npstd_h




# eof
