#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## posix/ndef_auto
####


if [ -z "$define_ndef_h" ]; then

define_ndef_h="ndef.h"


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi


# check for <npstd.h>
. ${POSIX_ROOT}/npstd_auto


if [    "$ndef___func__" = "yes"                \
     -o "$ndef_alignas" = "yes"                 \
     -o "$ndef_alignof" = "yes"                 \
     -o "$ndef_complex" = "yes"                 \
     -o "$ndef_generic" = "yes"                 \
     -o "$ndef_restrict" = "yes"                \
     -o "$ndef_static_assert" = "yes"           \
     -o "$ndef_va_args" = "yes"                 \
   ]; then
  echo "checking for ndef.h ..."
else
  return
fi


# check __func__ constant
#----------------------------------------
if [ "$ndef___func__" = "yes" ]; then
  nm_feature="__func__"
  nm_feature_name="nm_have___func__"
  nm_feature_run=
  nm_feature_h='#include <stdio.h>'
  nm_feature_flags="$CFLAGS"
  nm_feature_test='printf("fn=%s", __func__);'
  . ${NORE_ROOT}/auto/feature
fi


# check alignas
#----------------------------------------
if [ "$ndef_alignas" = "yes" ]; then
	nm_feature="_Alignas"
	nm_feature_name="nm_have_alignas"
	nm_feature_run=
	nm_feature_h=
	nm_feature_flags=
	nm_feature_test='int _Alignas(int) a; (void) sizeof(a);'
	. ${NORE_ROOT}/auto/feature
fi


# check alignof
#----------------------------------------
if [ "$ndef_alignof" = "yes" ]; then
	nm_feature="_Alignof"
	nm_feature_name="nm_have_alignof"
	nm_feature_run=
	nm_feature_h=
	nm_feature_flags=
	nm_feature_test='int a = (int) _Alignof(short); (void) sizeof(a);'
	. ${NORE_ROOT}/auto/feature
fi


# check _Complex
#----------------------------------------
if [ "$ndef_complex" = "yes" ]; then
  nm_feature="_Complex"
  nm_feature_name="nm_have_complex"
  nm_feature_run=no
  nm_feature_h=
  nm_feature_flags="$CFLAGS"
  nm_feature_test='
_Complex float f = 1.0 + 2.0i;
_Complex double d = 3.0 + 4.0i;
(void) f; (void) d;
'
  . ${NORE_ROOT}/auto/feature
fi

# check _Generic
#----------------------------------------
if [ "$ndef_generic" = "yes" ]; then
  nm_feature="_Generic"
  nm_feature_name="nm_have_generic"
  nm_feature_run=no
  nm_feature_h=
  nm_feature_flags="$CFLAGS"
  nm_feature_test='
#define type_name(x) _Generic((x), int:1, double:2, default: 3)
(void) sizeof(type_name(1));
(void) sizeof(type_name(1.0));
'
  . ${NORE_ROOT}/auto/feature
fi


# check restrict keyword
#----------------------------------------
if [ "$ndef_restrict" = "yes" ]; then
	nm_feature="__restrict keyword"
	nm_feature_name="nm_have_restrict"
	nm_feature_run=
	nm_feature_h=
	nm_feature_flags="$CFLAGS"
	nm_feature_test='int x = 0x11; int *__restrict p = &x; (void)sizeof(p);'
	. ${NORE_ROOT}/auto/feature
fi


# check static_assert
#----------------------------------------
if [ "$ndef_static_assert" = "yes" ]; then
  nm_feature="_Static_assert"
  nm_feature_name="nm_have_static_assert"
  nm_feature_run=yes
  nm_feature_h="#include <assert.h>"
  nm_feature_flags="$CFLAGS"
  nm_feature_test='enum {N=5}; _Static_assert(N==5, "N is not equal 5");'
  . ${NORE_ROOT}/auto/feature     # end of _Static_assert
fi


# check __VA_ARGS__
#----------------------------------------
if [ "$ndef_va_args" = "yes" ]; then
  nm_feature="variadic macro"
  nm_feature_name="nm_have_va_args"
  nm_feature_run=yes
  nm_feature_h='#include <stdio.h>'
  nm_feature_flags=
  nm_feature_test='
#define _vm_(fmt, ...)  printf(fmt, __VA_ARGS__)
_vm_("variadic=%s", "a");
'
  . ${NORE_ROOT}/auto/feature     # end of __VA_ARGS__
fi





fi                              # define_npstd_h




# eof
