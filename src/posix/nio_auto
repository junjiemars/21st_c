#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## posix/nio_auto
####


if [ -z "$define_nio_h" ]; then

define_nio_h="nio.h"


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi


# check nustd.h features
nustd_ssize_t="yes"
. ${POSIX_ROOT}/nustd_auto


if [    "$nio_getdelim" = "yes"                 \
     -o "$nio_fileno" = "yes"                   \
     -o "$nio_fdopen" = "yes"                   \
     -o "$nio_fmemopen" = "yes"                 \
     -o "$nio_dirname" = "yes"                  \
     -o "$nio_basename" = "yes"                 \
     -o "$nio_popen" = "yes"                    \
   ]; then
  echo "checking for nio.h ..."
else
  return
fi


# check getdelim
#----------------------------------------
if [ "$nio_getdelim" = "yes" ]; then
  case $CC_NAME in
    clang)
      nm_feature="getdelim"
      nm_feature_name="nm_have_getdelim"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags=
      nm_feature_test='getdelim((char**) 0,(size_t*) 0, 0x0a, stdout);'
      . ${NORE_ROOT}/auto/feature
      ;;
    gcc)
      nm_feature="getdelim"
      nm_feature_name="nm_have_getdelim"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags="-D_POSIX_C_SOURCE=${_POSIX_C_SOURCE}"
      nm_feature_test='getdelim((char**) 0,(size_t*) 0, 0x0a, stdout);'
      . ${NORE_ROOT}/auto/feature
      ;;
    msvc)
      nm_feature="getdelim"
      nm_feature_name="nm_have_getdelim"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags="-D_CRT_SECURE_NO_WARNINGS $CFLAGS"
      nm_feature_test='getdelim((char**) 0, (size_t*) 0, 0x0a, stdout);'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      ;;
  esac
fi # end of getdelim


# check fileno
#----------------------------------------
if [ "$nio_fileno" = "yes" ]; then
  case $CC_NAME in
    clang)
      nm_feature="fileno"
      nm_feature_name="nm_have_fileno"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags=
      nm_feature_test='fileno(stdout);'
      . ${NORE_ROOT}/auto/feature
      ;;
    gcc)
      nm_feature="fileno"
      nm_feature_name="nm_have_fileno"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags="-D_POSIX_C_SOURCE=${_POSIX_C_SOURCE}"
      nm_feature_test='fileno(stdout);'
      . ${NORE_ROOT}/auto/feature
      ;;
    msvc)
      nm_feature="fileno"
      nm_feature_name="nm_have_fileno"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags="-D_CRT_SECURE_NO_WARNINGS $CFLAGS"
      nm_feature_test='_fileno(stdout);'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      ;;
  esac
fi


# check fdopen
#----------------------------------------
if [ "$nio_fdopen" = "yes" ]; then
  case $CC_NAME in
    clang)
      nm_feature="fdopen"
      nm_feature_name="nm_have_fdopen"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags=
      nm_feature_test='fdopen(0, "r");'
      . ${NORE_ROOT}/auto/feature
      ;;
    gcc)
      nm_feature="fdopen"
      nm_feature_name="nm_have_fdopen"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags="-D_POSIX_C_SOURCE=${_POSIX_C_SOURCE}"
      nm_feature_test='fdopen(0, "r");'
      . ${NORE_ROOT}/auto/feature
      ;;
    msvc)
      nm_feature="fdopen"
      nm_feature_name="nm_have_fdopen"
      nm_feature_run=no
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags="-D_CRT_SECURE_NO_WARNINGS $CFLAGS"
      nm_feature_test='_fdopen(0, "r");'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      ;;
  esac
fi


#check fmemopen
#----------------------------------------
if [ "$nio_fmemopen" = "yes" ]; then
    nm_feature="fmemopen"
    nm_feature_name="nm_have_fmemopen"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags=
    nm_feature_inc=
    nm_feature_ldlibs=
    nm_feature_test='char *buf[0];FILE* f=fmemopen(buf,0,"r"); fclose(f);'
    . ${NORE_ROOT}/auto/feature
    if [ "$nm_found" = "yes" ]; then
      have=$nm_have_feature . ${NORE_ROOT}/auto/have
      flag=$nm_feature_name op=":=" value="yes" \
        . ${NORE_ROOT}/auto/make_define
    fi
fi # end of fmemopen

# check dirname
#----------------------------------------
if [ "$nio_dirname" = "yes" ]; then
  printf " + checking for dirname ... "
  nm_feature="dirname"
  nm_feature_name="nm_have_dirname"
  nm_feature_run=dumb
  nm_feature_h='#include <libgen.h>'
  nm_feature_flags=
  nm_feature_test='(void)dirname("/a/b/c");'
  . ${NORE_ROOT}/auto/feature
  if [ "$nm_found" = "yes" ]; then
    have=$nm_have_feature . ${NORE_ROOT}/auto/have
    printf "yes\n"
  else
    case $NM_SYSTEM in
      Linux)
        nm_feature_name="nm_have_dirname"
        nm_feature_run=dumb
        nm_feature_h='
#include <libgen.h>
#include <string.h>
'
        nm_feature_flags="-D_POSIX_C_SOURCE=${_POSIX_C_SOURCE}"
        nm_feature_test='char s[]="/a/b/c"; (void)dirname(s);'
        . ${NORE_ROOT}/auto/feature
        if [ "$nm_found" = "yes" ]; then
          have=$nm_have_feature . ${NORE_ROOT}/auto/have
        fi
        echo "$nm_found"
        ;;
      WinNT)
        nm_feature_name="nm_have_dirname_getfullpathname"
        nm_feature_run=dumb
        nm_feature_h='#include <windows.h>'
        case $CC_NAME in
          msvc)
            nm_feature_flags="-D_CRT_SECURE_NO_WARNINGS $CFLAGS"
            ;;
          *)
            nm_feature_flags=
            ;;
        esac
        nm_feature_test='(void)GetFullPathName(NULL, 0, NULL, NULL);'
        . ${NORE_ROOT}/auto/feature
        if [ "$nm_found" = "yes" ]; then
          have=$nm_have_feature . ${NORE_ROOT}/auto/have
        fi
        echo "$nm_found"
        ;;
      *)
        printf "no\n"
        ;;
    esac
  fi
fi                              # nio_dirname


# check basename
#----------------------------------------
if [ "$nio_basename" = "yes" ]; then
  printf " + checking for basename ... "
  nm_feature="basename"
  nm_feature_name="nm_have_basename"
  nm_feature_run=dumb
  nm_feature_h='#include <libgen.h>'
  nm_feature_flags=
  nm_feature_test='(void) basename("/a/b/c");'
  . ${NORE_ROOT}/auto/feature
  if [ "$nm_found" = "yes" ]; then
    have=$nm_have_feature . ${NORE_ROOT}/auto/have
    printf "yes\n"
  else
    case $NM_SYSTEM in
      Linux)
        nm_feature_name="basename"
        nm_feature_run=dumb
        nm_feature_h='#include <libgen.h>'
        nm_feature_flags="-D_POSIX_C_SOURCE=${_POSIX_C_SOURCE}"
        nm_feature_test='(void) basename("/a/b/c");'
        . ${NORE_ROOT}/auto/feature
        if [ "$nm_found" = "yes" ]; then
          have=$nm_have_feature . ${NORE_ROOT}/auto/have
        fi
        echo "$nm_found"
        ;;
      WinNT)
        nm_feature_name="nm_have_basename_getfullpathname"
        nm_feature_run=dumb
        nm_feature_h='#include <windows.h>'
        case $CC_NAME in
          msvc)
            nm_feature_flags="-D_CRT_SECURE_NO_WARNINGS $CFLAGS"
            ;;
          *)
            nm_feature_flags=
            ;;
        esac
        nm_feature_test='(void) GetFullPathName(NULL, 0, NULL, NULL);'
        . ${NORE_ROOT}/auto/feature
        if [ "$nm_found" = "yes" ]; then
          have=$nm_have_feature . ${NORE_ROOT}/auto/have
        fi
        echo "$nm_found"
        ;;
      *)
        printf "no\n"
        ;;
    esac
  fi
fi # nio_basename


#check popen
#----------------------------------------
if [ "$nio_popen" = "yes" ]; then
    nm_feature="popen"
    nm_feature_name="nm_have_popen"
    nm_feature_run=no
    nm_feature_h='#include <stdio.h>'
    nm_feature_flags=
    nm_feature_inc=
    nm_feature_ldlibs=
  case $CC_NAME in
    clang|gcc)
      nm_feature_test='FILE* f=popen("dir","r"); if (f) pclose(f);'
      . ${NORE_ROOT}/auto/feature
      have=$nm_have_feature . ${NORE_ROOT}/auto/have
      ;;
    msvc)
      nm_feature_test='FILE* f=_popen("dir","r"); if (f) _pclose(f);'
      . ${NORE_ROOT}/auto/feature
      ;;
  esac
fi # end of popen


fi # define_nio_h

# eof
