#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## ffi/auto
####


echo "checking for {ffi} ..."

nt_to_posix_path() {
	if [[ $1 =~ ^[a-zA-Z]:\\.* ]]; then
		echo "\\$1" | \
			sed -e 's#^\\\([a-zA-Z]\):\\#\\\l\1\\#' | \
			sed -e 's#\\#\/#g'
	else
		echo "$1"
	fi
}


check_java_env () {
  local has_java=NO
  local javac_ver=
  local javac=javac
  local javah=javah
  local java_home=
  local java=
  local jni_inc=
  local jni_cflags=
  local jni_ldflags=
  local jni_ldlibs=

  echo ${echo_n} " + checking for java ... " ${echo_c}

  javac_ver="`${javac} -version 2>/dev/null`"
  if [ -z "$javac_ver" ]; then
    echo "no"
    return
  fi

  javac_ver=`echo ${javac_ver}|sed -e 's/^javac \([0-9][0-9]*\)\..*$/\1/'`
  if [ 0 -ne $? ]; then
    echo "no"
    return
  fi

  if [ "$javac_ver" -ge 8 ]; then
    javah="javac -h"
  fi

  case ${NM_SYSTEM} in
    Darwin)
      java_home="`/usr/libexec/java_home`"
      if [ -d "$java_home" ]; then
		    jni_inc="-I${java_home}/include -I${java_home}/include/darwin"
		    jni_ldflags="-L${java_home}/jre/lib/server"
		    jni_ldlibs="-ljvm"
      fi
      ;;
    Linux)
      java_home="$(dirname $(dirname $(readlink -f $(which javac))))"
      if [ 0 -eq $? -a -d "$java_home" ]; then
		    jni_inc="-I${java_home}/include -I${java_home}/include/linux"
		    jni_ldflags="-L${java_home}/lib"
		    jni_ldlibs="-ljvm"
      fi
      ;;
    WinNT)
      java_home=`nt_to_posix_path "$java_home"`
      if [ 0 -eq $? -a -d "$java_home" ]; then
		    jni_inc="-I${java_home}/include -I${java_home}/include/win32"
      fi
      ;;
  esac

  if [ ! -f "${java_home}/bin/java" ]; then
    echo "no"
    return
  fi

  if [ "$NM_SYMBOL" == "YES" ]; then
    jni_cflags="-g"
  fi

  flag=JAVAC value="$javac" . ${NORE_ROOT}/auto/make_define
  flag=JAVAH value="$javah" . ${NORE_ROOT}/auto/make_define
  flag=JAVA  value="${java_home}/bin/java" . ${NORE_ROOT}/auto/make_define
  flag=jni_inc value="$jni_inc" . ${NORE_ROOT}/auto/make_define
  flag=jni_cflags value="$jni_cflags" . ${NORE_ROOT}/auto/make_define
  flag=jni_ldflags value="$jni_ldflags" . ${NORE_ROOT}/auto/make_define
  flag=jni_ldlibs value="$jni_ldlibs" . ${NORE_ROOT}/auto/make_define

  flag=has_java value="YES" . ${NORE_ROOT}/auto/make_define
  echo "yes"
}


# check compiler features
#----------------------------------------
case $CC_NAME in
	clang|gcc)
		nm_feature="$CC_NAME -fPIC"
		nm_feature_name=
    nm_feature_indent=yes
		nm_feature_run=no
		nm_feature_h=
		nm_feature_flags=-fPIC
		nm_feature_test=
		. ${NORE_ROOT}/auto/feature
		if [ yes = $nm_found ]; then
			flag=CFLAGS op='+=' value='-fPIC' \
          . ${NORE_ROOT}/auto/make_define
		fi
	  ;;
	msvc)
    # msvc do not use position independent code
    ;;
esac


check_nodejs () {
  local has_nodejs=NO
  local nodejs_ver=
  local npm_ver=

  echo ${echo_n} " + checking for node.js ... " ${echo_c}

  nodejs_ver="`node --version 2>/dev/null`"
  if [ 0 -ne $? -o -z "$nodejs_ver" ]; then
    echo "no"
    return
  fi

  npm_ver="`npm --version 2>/dev/null`"
  if [ 0 -ne $? -o -z "$npm_ver" ]; then
    echo "no"
    return
  fi

  flag=has_nodejs value="YES" . ${NORE_ROOT}/auto/make_define
  echo "yes"
}


# check java
#----------------------------------------
check_java_env

# check nodejs
#----------------------------------------
check_nodejs


# eof
