#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## ffi/auto
####


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi


# check ncc.h features
ncc_sanitize_address="yes"
ncc_pic="yes"
. ${POSIX_ROOT}/ncc_auto

# check nustd.h features
nustd_ssize_t="yes"
. ${POSIX_ROOT}/nustd_auto

# check nlim.h features
nlim_pagesize="yes"
nlim_times="yes"
. ${POSIX_ROOT}/nlim_auto


echo "checking for {ffi} ..."

nt_to_posix_path() {
	if [[ $1 =~ ^[a-zA-Z]:\\.* ]]; then
		echo "\\$1" | \
			sed -e 's#^\\\([a-zA-Z]\):\\#\\\l\1\\#' | \
			sed -e 's#\\#\/#g'
	else
		echo "$1"
	fi
}


check_java_env () {
  local has_java=NO
  local javac_ver=
  local javac=javac
  local javah=javah
  local java_home=
  local java=
  local jni_inc=
  local jni_cflags=
  local jni_ldflags=
  local jni_ldlibs=

  printf " + checking for java ... "

  javac_ver="`${javac} -version 2>/dev/null`"
  if [ -z "$javac_ver" ]; then
    printf "no\n"
    return
  fi

  javac_ver=`echo ${javac_ver}|sed -e 's/^javac \([0-9][0-9]*\)\..*$/\1/'`
  if [ 0 -ne $? ]; then
    printf "no\n"
    return
  fi

  if [ "$javac_ver" -ge 8 ]; then
    javah="javac -h"
  fi

  case ${NM_SYSTEM} in
    Darwin)
      java_home="`/usr/libexec/java_home`"
      if [ -d "$java_home" ]; then
		    jni_inc="-I${java_home}/include -I${java_home}/include/darwin"
		    jni_ldflags="-L${java_home}/jre/lib/server"
		    jni_ldlibs="-ljvm"
      fi
      ;;
    Linux)
      java_home="$(dirname $(dirname $(readlink -f $(which javac))))"
      if [ 0 -eq $? -a -d "$java_home" ]; then
		    jni_inc="-I${java_home}/include -I${java_home}/include/linux"
		    jni_ldflags="-L${java_home}/lib"
		    jni_ldlibs="-ljvm"
      fi
      ;;
    WinNT)
      java_home=`nt_to_posix_path "$java_home"`
      if [ 0 -eq $? -a -d "$java_home" ]; then
		    jni_inc="-I${java_home}/include -I${java_home}/include/win32"
      fi
      ;;
  esac

  if [ ! -f "${java_home}/bin/java" ]; then
    printf "no\n"
    return
  fi

  if [ "$NM_SYMBOL" == "YES" ]; then
    jni_cflags="-g"
  fi

  flag=JAVAC value="$javac" . ${NORE_ROOT}/auto/make_define
  flag=JAVAH value="$javah" . ${NORE_ROOT}/auto/make_define
  flag=JAVA  value="${java_home}/bin/java" . ${NORE_ROOT}/auto/make_define
  flag=jni_inc value="$jni_inc" . ${NORE_ROOT}/auto/make_define
  flag=jni_cflags value="$jni_cflags" . ${NORE_ROOT}/auto/make_define
  flag=jni_ldflags value="$jni_ldflags" . ${NORE_ROOT}/auto/make_define
  flag=jni_ldlibs value="$jni_ldlibs" . ${NORE_ROOT}/auto/make_define

  flag=has_java value="YES" . ${NORE_ROOT}/auto/make_define
  printf "yes\n"
}


check_nodejs () {
  local has_nodejs=NO
  local nodejs_ver=
  local npm_ver=

  printf " + checking for node.js ... "

  nodejs_ver="`node --version 2>/dev/null`"
  if [ 0 -ne $? -o -z "$nodejs_ver" ]; then
    printf "no\n"
    return
  fi

  npm_ver="`npm --version 2>/dev/null`"
  if [ 0 -ne $? -o -z "$npm_ver" ]; then
    printf "no\n"
    return
  fi

  flag=has_nodejs value="YES" . ${NORE_ROOT}/auto/make_define
  printf "yes\n"
}

check_python () {
  local python_minor="$(python3 -c'import sys;print("%s"%(sys.version_info.minor))' 2>/dev/null)"
  local python_inc="$(python3 -c'import sysconfig;print("%s"%(sysconfig.get_path("include")))' 2>/dev/null)"
  local python_mod_ext="$(python3 -c'import sysconfig;print("%s"%(sysconfig.get_config_var("EXT_SUFFIX")))' 2>/dev/null)"
  local python_cflags="$(python3 -c'import sysconfig;print("%s"%(sysconfig.get_config_var("CFLAGS")))' 2>/dev/null)"
  local python_ldflags="$(python3 -c'import sysconfig;print("%s"%(sysconfig.get_config_var("LDFLAGS")))' 2>/dev/null)"
  local python_rs_ver="$(command -v rustc && rustc -V|sed -E -e's/^rustc ([.0-9]+) .*$/\1/'|tr '.' '\n' 2>/dev/null)"
  local python_rs_major="$(printf '%s' $python_rs_ver|sed -n -e'1p')"
  local python_rs_minor="$(printf '%s' $python_rs_ver|sed -n -e'2p')"
  printf " + checking for Python ... "
  if [ -z "$python_minor" -o -z "$python_inc" -o $python_minor -lt 8 ]; then
    printf "no\n"
    return
  fi
  flag=has_python op=":=" value="yes" . ${NORE_ROOT}/auto/make_define
  printf "yes\n"
  printf " + checking for Python(C) ..."
  nm_feature=
  nm_feature_name=
  nm_feature_run=dumb
  nm_feature_h='#include <Python.h>'
  nm_feature_flags="${nm_inc_opt}${python_inc}"
  nm_feature_test='PyObject *o1 = NULL; (void)o1;'
  . ${NORE_ROOT}/auto/feature
  if [ "$nm_found" = "yes" ]; then
    flag=has_python_c op=":=" value="yes" . ${NORE_ROOT}/auto/make_define
    flag=python_inc op=":=" value="${nm_feature_flags}" . ${NORE_ROOT}/auto/make_define
    flag=python_mod_ext op=":=" value="${python_mod_ext}" . ${NORE_ROOT}/auto/make_define
    flag=python_cflags op=":=" value="${python_cflags}" . ${NORE_ROOT}/auto/make_define
    flag=python_ldflags op=":=" value="${python_ldflags}" . ${NORE_ROOT}/auto/make_define
    printf "yes\n"
  else
    printf "no\n"
  fi
  printf " + checking for Python(Rust) ..."
  if [ -z "$python_rs_ver" -o $python_rs_major -lt 1 -o $python_rs_minor -lt 7 ]; then
    printf "no\n"
  else
    flag=has_python_rs op=":=" value="yes" . ${NORE_ROOT}/auto/make_define
    printf "yes\n"
  fi
}


# check java
#----------------------------------------
check_java_env

# check nodejs
#----------------------------------------
check_nodejs

# check python
#----------------------------------------
check_python


# eof
