#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## ld/auto
####

echo "checking for cc's {ld} ..."

ld_lib_opt="-l"
ld_libdir_opt="-L"
ld_out_opt="-o"
if [ $CC_NAME = "msvc" ]; then
  ld_lib_opt=""
  ld_libdir_opt="-libpath:"
  ld_out_opt="-out"
fi
ld_lib_crt=
if [ $NM_SYSTEM = "Linux" ]; then
  ld_lib_crt=$(locate crt1.o)
fi
flag="ld_lib_opt" op="=" value="$ld_lib_opt" \
  . ${NORE_ROOT}/auto/make_define
flag="ld_out_opt" op="=" value="$ld_out_opt" \
  . ${NORE_ROOT}/auto/make_define
flag="ld_lib_crt" op="=" value="$ld_lib_crt" \
  . ${NORE_ROOT}/auto/make_define

ldtest_c="$NM_OUT/ldtest.c"
ldtest_o="$NM_OUT/ldtest.o"
ldtest="$NM_OUT/ldtest"

# check entry option
#----------------------------------------
ld_entry_opt=-e
has_ld_entry_opt=no
printf " + checking for -e ... "
cat <<END>"$ldtest_c"
int main1(void) {
  return 0;
}
END
$CC $obj_out "$ldtest_o" $nm_stage_c "$ldtest_c"
$LD $ld_out_opt $ldtest $ld_entry_opt _main1 "$ldtest_o" ${ld_lib_opt}c
if [ $? -eq 0 -a -f "$ldtest" ]; then
  has_ld_entry_opt=yes
  flag="ld_entry_opt" op="=" value="$ld_entry_opt" \
    . ${NORE_ROOT}/auto/make_define
fi
printf "%s\n" "$has_ld_entry_opt"
rm -f "$ldtest_c" "$ldtest_o" "$ldtest"

# check static option
#----------------------------------------
nm_feature="-static"
nm_feature_name=
nm_feature_indent=yes
nm_feature_run=yes
nm_feature_h=
nm_feature_flags='-static'
nm_feature_test='return 0;'
. ${NORE_ROOT}/auto/feature
if [ yes = $nm_found ]; then
  flag="ld_static_opt" op="=" value="$nm_feature"  \
    . ${NORE_ROOT}/auto/make_define
fi

# check nostartfiles option
#----------------------------------------
nm_feature="-nostartfiles"
nm_feature_name=
nm_feature_indent=yes
nm_feature_run=no
nm_feature_h=
nm_feature_flags=
nm_feature_test=
. ${NORE_ROOT}/auto/feature
if [ yes = $nm_found ]; then
  flag="ld_nostartfiles_opt" op=":=" value="$nm_feature"  \
    . ${NORE_ROOT}/auto/make_define
  # nm_feature="-Wl,-e"
  # nm_feature_name=
  # nm_feature_indent=yes
  # nm_feature_run=yes
  # nm_feature_h=
  # nm_feature_flags='-Wl,-e_main'
  # nm_feature_test='return 0;'
  # . ${NORE_ROOT}/auto/feature
  # if [ yes = $nm_found ]; then
  #   flag="ld_entry_opt" op=":=" value="$nm_feature" \
  #     . ${NORE_ROOT}/auto/make_define
  # fi
fi

# check nostdlib option
#----------------------------------------
nm_feature="-nostdlib"
nm_feature_name=
nm_feature_indent=yes
nm_feature_run=no
nm_feature_h=
nm_feature_flags=
nm_feature_test=
. ${NORE_ROOT}/auto/feature
if [ yes = $nm_found ]; then
  flag="ld_nostdlib_opt" op=":=" value="$nm_feature"  \
    . ${NORE_ROOT}/auto/make_define
fi


# check no-pie option
#----------------------------------------
case "$CC_NAME" in
  clang)
    ;;
  gcc)
    nm_feature="-fno-pie"
    nm_feature_name=
    nm_feature_indent=yes
    nm_feature_run=yes
    nm_feature_h=
    nm_feature_flags='-fno-pie'
    nm_feature_test='return 0;'
    . ${NORE_ROOT}/auto/feature
    if [ yes = $nm_found ]; then
      flag="ld_nopie_opt" op=":=" value="$nm_feature"  \
        . ${NORE_ROOT}/auto/make_define
    fi
    ;;
  msvc)
    ;;
esac


# check -Wl,' link option for CC
#----------------------------------------
case "$CC_NAME" in
  clang|gcc)
    nm_feature="-Wl,--wrap"
    nm_feature_name=
    nm_feature_indent=yes
    nm_feature_run=no
    nm_feature_h=
    nm_feature_flags='-Wl,--wrap'
    nm_feature_test=
    . ${NORE_ROOT}/auto/feature
    if [ yes = $nm_found ]; then
      flag="ld_wrap_opt" op=":=" value="${nm_feature}="  \
        . ${NORE_ROOT}/auto/make_define
    fi
    ;;
  msvc)
    ;;
esac


# eof
